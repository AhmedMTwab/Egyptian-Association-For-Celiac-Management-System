// <auto-generated />
using System;
using Egyptian_association_of_cieliac_patients.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Egyptian_association_of_cieliac_patients.Migrations
{
    [DbContext(typeof(EgyptianAssociationOfCieliacPatientsContext))]
<<<<<<<< HEAD:Migrations/20240413154007_assosiation-patient.Designer.cs
    [Migration("20240413154007_assosiation-patient")]
    partial class assosiationpatient
========
    [Migration("20240412065012_multivalue")]
    partial class multivalue
>>>>>>>> b3feb215df36f47c5294f1f05e4b5bfc9afad0ad:Migrations/20240412065012_multivalue.Designer.cs
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.AssosiationBranch", b =>
                {
                    b.Property<int>("AssosiationId")
                        .HasColumnType("int")
                        .HasColumnName("assosiation_id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("address");

                    b.Property<TimeOnly>("CloseTime")
                        .HasColumnType("time")
                        .HasColumnName("close_time");

                    b.Property<TimeOnly>("OpenTime")
                        .HasColumnType("time")
                        .HasColumnName("open_time");

                    b.HasKey("AssosiationId");

                    b.ToTable("assosiation_branch");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.AssosiationBranchPhone", b =>
                {
                    b.Property<int>("AssosiationId")
                        .HasColumnType("int")
                        .HasColumnName("assosiation_id");

                    b.Property<decimal>("PhoneNumber")
                        .HasColumnType("numeric(18, 0)")
                        .HasColumnName("phone_number");

                    b.HasIndex("AssosiationId");

                    b.ToTable("assosiation_branch_phone");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.AssosiationDisesFollow", b =>
                {
                    b.Property<int>("AssosiationId")
                        .HasColumnType("int")
                        .HasColumnName("assosiation_id");

                    b.Property<int>("DisesId")
                        .HasColumnType("int")
                        .HasColumnName("dises_id");

                    b.HasIndex("AssosiationId");

                    b.HasIndex("DisesId");

                    b.ToTable("assosiation_dises_follow");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.AssosiationInsuranceProvide", b =>
                {
                    b.Property<int>("AssosiationId")
                        .HasColumnType("int")
                        .HasColumnName("assosiation_id");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("end_date");

                    b.Property<int>("InsuranceId")
                        .HasColumnType("int")
                        .HasColumnName("insurance_id");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("start_date");

                    b.HasIndex("AssosiationId");

                    b.HasIndex("InsuranceId");

                    b.ToTable("assosiation_insurance_provide");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.Cart", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("order_id");

                    b.Property<DateOnly>("OrderDate")
                        .HasColumnType("date")
                        .HasColumnName("order_date");

                    b.Property<string>("OrderDetails")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("order_details");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("patient_id");

                    b.Property<int>("PaymentId")
                        .HasColumnType("int")
                        .HasColumnName("payment_id");

                    b.Property<string>("ShipmentLocation")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("shipment_location");

                    b.Property<decimal>("ShipmentPhone")
                        .HasColumnType("numeric(18, 0)")
                        .HasColumnName("shipment_phone");

                    b.Property<TimeOnly>("ShipmentTime")
                        .HasColumnType("time")
                        .HasColumnName("shipment_time");

                    b.Property<decimal>("TotalCost")
                        .HasColumnType("money")
                        .HasColumnName("total_cost");

                    b.HasKey("OrderId");

                    b.HasIndex("PatientId");

                    b.HasIndex("PaymentId");

                    b.ToTable("cart");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.CartMaterialAdd", b =>
                {
                    b.Property<int>("MaterialId")
                        .HasColumnType("int")
                        .HasColumnName("material_id");

                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("order_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.HasIndex("MaterialId");

                    b.HasIndex("OrderId");

                    b.ToTable("cart_material_add");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.CartProductAdd", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("order_id");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("cart_product_add");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.Clinic", b =>
                {
                    b.Property<int>("ClinicId")
                        .HasColumnType("int")
                        .HasColumnName("clinic_id");

                    b.Property<TimeOnly>("CloseTime")
                        .HasColumnType("time")
                        .HasColumnName("close_time");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<TimeOnly>("OpenTime")
                        .HasColumnType("time")
                        .HasColumnName("open_time");

                    b.HasKey("ClinicId");

                    b.ToTable("clinic");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.ClinicAddress", b =>
                {
                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("clinic_address");

                    b.Property<int>("ClinicId")
                        .HasColumnType("int")
                        .HasColumnName("clinic_id");

                    b.HasIndex("ClinicId");

                    b.ToTable("clinic_address");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.ClinicAssosiationDiscount", b =>
                {
                    b.Property<int>("AssosiationId")
                        .HasColumnType("int")
                        .HasColumnName("assosiation_id");

                    b.Property<int>("ClinicId")
                        .HasColumnType("int")
                        .HasColumnName("clinic_id");

                    b.Property<double>("DiscountPrecentage")
                        .HasColumnType("float")
                        .HasColumnName("discount_precentage");

                    b.HasIndex("AssosiationId");

                    b.HasIndex("ClinicId");

                    b.ToTable("clinic_assosiation_discount");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.ClinicInsuranceDiscount", b =>
                {
                    b.Property<int>("ClinicId")
                        .HasColumnType("int")
                        .HasColumnName("clinic_id");

                    b.Property<double>("DiscountPrecentage")
                        .HasColumnType("float")
                        .HasColumnName("discount_precentage");

                    b.Property<int>("InsuranceId")
                        .HasColumnType("int")
                        .HasColumnName("insurance_id");

                    b.HasIndex("ClinicId");

                    b.HasIndex("InsuranceId");

                    b.ToTable("clinic_insurance_discount");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.ClinicPhone", b =>
                {
                    b.Property<int>("ClinicId")
                        .HasColumnType("int")
                        .HasColumnName("clinic_id");

                    b.Property<decimal>("PhoneNumber")
                        .HasColumnType("numeric(18, 0)")
                        .HasColumnName("phone_number");

                    b.HasIndex("ClinicId");

                    b.ToTable("clinic_phone");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.Dise", b =>
                {
                    b.Property<int>("DisesId")
                        .HasColumnType("int")
                        .HasColumnName("dises_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.HasKey("DisesId");

                    b.ToTable("dises");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.DisesMaterialCatogrize", b =>
                {
                    b.Property<string>("CatogeryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("catogery_name");

                    b.Property<int>("DisesId")
                        .HasColumnType("int")
                        .HasColumnName("dises_id");

                    b.Property<int>("MaterialId")
                        .HasColumnType("int")
                        .HasColumnName("material_id");

                    b.HasIndex("DisesId");

                    b.HasIndex("MaterialId");

                    b.ToTable("dises_material_catogrize");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.DisesProductCatogrize", b =>
                {
                    b.Property<string>("CatogertName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("catogert_name");

                    b.Property<int>("DisesId")
                        .HasColumnType("int")
                        .HasColumnName("dises_id");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.HasIndex("DisesId");

                    b.HasIndex("ProductId");

                    b.ToTable("dises_product_catogrize");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.Doctor", b =>
                {
                    b.Property<int>("DoctorId")
                        .HasColumnType("int")
                        .HasColumnName("doctor_id");

                    b.Property<TimeOnly>("ArriveTime")
                        .HasColumnType("time")
                        .HasColumnName("arrive_time");

                    b.Property<TimeOnly>("LeaveTime")
                        .HasColumnType("time")
                        .HasColumnName("leave_time");

                    b.Property<string>("Major")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("major");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.HasKey("DoctorId");

                    b.ToTable("doctor");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.DoctorClinicWork", b =>
                {
                    b.Property<int>("ClinicId")
                        .HasColumnType("int")
                        .HasColumnName("clinic_id");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int")
                        .HasColumnName("doctor_id");

                    b.HasIndex("ClinicId");

                    b.HasIndex("DoctorId");

                    b.ToTable("doctor_clinic_work");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.DoctorMedicalrecordVeiw", b =>
                {
                    b.Property<int>("DoctorId")
                        .HasColumnType("int")
                        .HasColumnName("doctor_id");

                    b.Property<int>("RecordId")
                        .HasColumnType("int")
                        .HasColumnName("record_id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("RecordId");

                    b.ToTable("doctor_medicalrecord_veiw");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.DoctorPhone", b =>
                {
                    b.Property<int>("DoctorId")
                        .HasColumnType("int")
                        .HasColumnName("doctor_id");

                    b.Property<decimal>("PhoneNumber")
                        .HasColumnType("numeric(18, 0)")
                        .HasColumnName("phone_number");

                    b.HasIndex("DoctorId");

                    b.ToTable("doctor_phone");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.HealthInsurance", b =>
                {
                    b.Property<int>("InsuranceId")
                        .HasColumnType("int")
                        .HasColumnName("insurance_id");

                    b.Property<int>("LicenseCode")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.HasKey("InsuranceId");

                    b.ToTable("health_insurance");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.Hospital", b =>
                {
                    b.Property<int>("HospitalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("hospital_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HospitalId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.HasKey("HospitalId");

                    b.ToTable("hospital");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.HospitalAddress", b =>
                {
                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("hospital_address");

                    b.Property<int>("HospitalId")
                        .HasColumnType("int")
                        .HasColumnName("hospital_id");

                    b.Property<int>("hospitalId")
                        .HasColumnType("int");

                    b.HasIndex("hospitalId");

                    b.ToTable("hospital_address");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.HospitalInsuranceDiscount", b =>
                {
                    b.Property<double>("DiscountPrecentage")
                        .HasColumnType("float")
                        .HasColumnName("discount_precentage");

                    b.Property<int>("HospitalId")
                        .HasColumnType("int")
                        .HasColumnName("hospital_id");

                    b.Property<int>("InsuranceId")
                        .HasColumnType("int")
                        .HasColumnName("insurance_id");

                    b.HasIndex("HospitalId");

                    b.HasIndex("InsuranceId");

                    b.ToTable("hospital_insurance_discount");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.HospitalPhone", b =>
                {
                    b.Property<int>("HospitalId")
                        .HasColumnType("int")
                        .HasColumnName("hospital_id");

                    b.Property<decimal>("PhoneNumber")
                        .HasColumnType("numeric(18, 0)")
                        .HasColumnName("phone_number");

                    b.HasIndex("HospitalId");

                    b.ToTable("hospital_phone");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.HospitalType", b =>
                {
                    b.Property<int>("HospitalId")
                        .HasColumnType("int")
                        .HasColumnName("hospital_id");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("hospital_type");

                    b.HasIndex("HospitalId");

                    b.ToTable("hospital_type");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.InsuranceAddress", b =>
                {
                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("address");

                    b.Property<int>("InsuranceId")
                        .HasColumnType("int")
                        .HasColumnName("insurance_id");

                    b.HasIndex("InsuranceId");

                    b.ToTable("insurance_address");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.InsurancePhone", b =>
                {
                    b.Property<int>("InsuranceId")
                        .HasColumnType("int")
                        .HasColumnName("insurance_id");

                    b.Property<int>("PhoneNumber")
                        .HasColumnType("int")
                        .HasColumnName("phone_number");

                    b.HasIndex("InsuranceId");

                    b.ToTable("insurance_phone");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.Lab", b =>
                {
                    b.Property<int>("LabId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("lab_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LabId"));

                    b.Property<TimeOnly>("CloseTime")
                        .HasColumnType("time")
                        .HasColumnName("close_time");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<TimeOnly>("OpenTime")
                        .HasColumnType("time")
                        .HasColumnName("open_time");

                    b.HasKey("LabId");

                    b.ToTable("lab");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.LabAddress", b =>
                {
                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("lab_address");

                    b.Property<int>("LabId")
                        .HasColumnType("int")
                        .HasColumnName("lab_id");

                    b.Property<int>("labId")
                        .HasColumnType("int");

                    b.HasIndex("labId");

                    b.ToTable("lab_address");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.LabAssosiationDiscount", b =>
                {
                    b.Property<int>("AssosiationId")
                        .HasColumnType("int")
                        .HasColumnName("assosiation_id");

                    b.Property<double>("DiscountPrecentage")
                        .HasColumnType("float")
                        .HasColumnName("discount_precentage");

                    b.Property<int>("LabId")
                        .HasColumnType("int")
                        .HasColumnName("lab_id");

                    b.HasIndex("AssosiationId");

                    b.HasIndex("LabId");

                    b.ToTable("lab_assosiation_discount");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.LabInsuranceDiscount", b =>
                {
                    b.Property<double>("DiscountPrecentage")
                        .HasColumnType("float")
                        .HasColumnName("discount_precentage");

                    b.Property<int>("InsuranceId")
                        .HasColumnType("int")
                        .HasColumnName("insurance_id");

                    b.Property<int>("LabId")
                        .HasColumnType("int")
                        .HasColumnName("lab_id");

                    b.HasIndex("InsuranceId");

                    b.HasIndex("LabId");

                    b.ToTable("lab_insurance_discount");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.LabPhone", b =>
                {
                    b.Property<int>("LabId")
                        .HasColumnType("int")
                        .HasColumnName("lab_id");

                    b.Property<decimal>("PhoneNumber")
                        .HasColumnType("numeric(18, 0)")
                        .HasColumnName("phone_number");

                    b.HasIndex("LabId");

                    b.ToTable("lab_phone");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.LabType", b =>
                {
                    b.Property<int>("LabId")
                        .HasColumnType("int")
                        .HasColumnName("lab_id");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("lab_type");

                    b.HasIndex("LabId");

                    b.ToTable("lab_type");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.MedicalAdmin", b =>
                {
                    b.Property<int>("AdminId")
                        .HasColumnType("int")
                        .HasColumnName("admin_id");

                    b.Property<int>("AssosiationId")
                        .HasColumnType("int")
                        .HasColumnName("assosiation_id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("password");

                    b.HasKey("AdminId");

                    b.HasIndex("AssosiationId");

                    b.ToTable("medical_admin");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.MedicalAdminHospitalControl", b =>
                {
                    b.Property<int>("AdminId")
                        .HasColumnType("int")
                        .HasColumnName("admin_id");

                    b.Property<int>("HospitalId")
                        .HasColumnType("int")
                        .HasColumnName("hospital_id");

                    b.HasIndex("AdminId");

                    b.HasIndex("HospitalId");

                    b.ToTable("medicaladmin_hospital_control");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.MedicalAdminLabControl", b =>
                {
                    b.Property<int>("AdminId")
                        .HasColumnType("int")
                        .HasColumnName("admin_id");

                    b.Property<int>("LabId")
                        .HasColumnType("int")
                        .HasColumnName("lab_id");

                    b.HasIndex("AdminId");

                    b.HasIndex("LabId");

                    b.ToTable("medicaladmin_lab_control");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.MedicalAdminPharmacyControl", b =>
                {
                    b.Property<int>("AdminId")
                        .HasColumnType("int")
                        .HasColumnName("admin_id");

                    b.Property<int>("PharmacyId")
                        .HasColumnType("int")
                        .HasColumnName("pharmacy_id");

                    b.HasIndex("AdminId");

                    b.HasIndex("PharmacyId");

                    b.ToTable("medicaladmin_pharmacy_control");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.MedicalRecord", b =>
                {
                    b.Property<int>("RecordId")
                        .HasColumnType("int")
                        .HasColumnName("record_id");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<int?>("DisesId")
                        .HasColumnType("int")
                        .HasColumnName("dises_id");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("patient_id");

                    b.HasKey("RecordId");

                    b.ToTable("medical_record");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.MedicalRecordDrug", b =>
                {
                    b.Property<string>("Drug")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("drug");

                    b.Property<int>("RecordId")
                        .HasColumnType("int")
                        .HasColumnName("record_id");

                    b.HasIndex("RecordId");

                    b.ToTable("medical_record-drug");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.MedicalRecordTest", b =>
                {
                    b.Property<int>("RecordId")
                        .HasColumnType("int")
                        .HasColumnName("record_id");

                    b.Property<string>("TestsPath")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("test");

                    b.HasIndex("RecordId");

                    b.ToTable("medical_record-test");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.MedicaladminClinicControl", b =>
                {
                    b.Property<int>("AdminId")
                        .HasColumnType("int")
                        .HasColumnName("admin_id");

                    b.Property<int>("ClinicId")
                        .HasColumnType("int")
                        .HasColumnName("clinic_id");

                    b.HasIndex("AdminId");

                    b.HasIndex("ClinicId");

                    b.ToTable("medicaladmin_clinic_control");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.Patient", b =>
                {
                    b.Property<int>("PatientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("patient_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientId"));

                    b.Property<int>("AssosiationId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("Dob")
                        .HasColumnType("date")
                        .HasColumnName("DOB");

                    b.Property<string>("PatientBloodtype")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("patient_bloodtype")
                        .IsFixedLength();

                    b.Property<string>("PatientName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("patient_name");

                    b.Property<int>("Ssn")
                        .HasColumnType("int")
                        .HasColumnName("SSN");

                    b.HasKey("PatientId");

                    b.HasIndex("AssosiationId");

                    b.ToTable("patient");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.PatientAddress", b =>
                {
                    b.Property<string>("Address")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("address");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("patient_id");

                    b.HasKey("Address", "PatientId");

                    b.HasIndex("PatientId");

                    b.ToTable("patient_address");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.PatientDisesHave", b =>
                {
                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("patient_id");

                    b.Property<int>("DisesId")
                        .HasColumnType("int")
                        .HasColumnName("dises_id");

                    b.HasKey("PatientId", "DisesId");

                    b.HasIndex("DisesId");

                    b.ToTable("patient_dises-have");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.PatientPhone", b =>
                {
                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("phone_number");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("patient_id");

                    b.HasKey("PhoneNumber", "PatientId");

                    b.HasIndex("PatientId");

                    b.ToTable("patient_phone");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.PatientProductView", b =>
                {
                    b.Property<int?>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("patient_id");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.HasIndex("PatientId");

                    b.HasIndex("ProductId");

                    b.ToTable("patient_product_view");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.PatientRawmaterialVeiw", b =>
                {
                    b.Property<int>("MaterialId")
                        .HasColumnType("int")
                        .HasColumnName("material_id");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("patient_id");

                    b.HasIndex("MaterialId");

                    b.HasIndex("PatientId");

                    b.ToTable("patient_rawmaterial_veiw");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .HasColumnType("int")
                        .HasColumnName("payment_id");

                    b.Property<string>("PaymentType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("payment_type")
                        .IsFixedLength();

                    b.Property<decimal>("TotalPaid")
                        .HasColumnType("money")
                        .HasColumnName("total_paid");

                    b.HasKey("PaymentId");

                    b.ToTable("payment");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.Pharmacy", b =>
                {
                    b.Property<int>("pharmacyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("pharmacy_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("pharmacyId"));

                    b.Property<TimeOnly>("CloseTime")
                        .HasColumnType("time")
                        .HasColumnName("close_time");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<TimeOnly>("OpenTime")
                        .HasColumnType("time")
                        .HasColumnName("open_time");

                    b.HasKey("pharmacyId");

                    b.ToTable("pharmacy");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.PharmacyAddress", b =>
                {
                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("pharmacy_address");

                    b.Property<int>("PharmacyId")
                        .HasColumnType("int")
                        .HasColumnName("pharmacy_id");

                    b.HasIndex("PharmacyId");

                    b.ToTable("pharmacy_address");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.PharmacyAssosiationDiscount", b =>
                {
                    b.Property<int>("AssosiationId")
                        .HasColumnType("int")
                        .HasColumnName("assosiation_id");

                    b.Property<double>("DiscountPrecentage")
                        .HasColumnType("float")
                        .HasColumnName("discount_precentage");

                    b.Property<int>("PharmacyId")
                        .HasColumnType("int")
                        .HasColumnName("pharmacy_id");

                    b.HasIndex("AssosiationId");

                    b.HasIndex("PharmacyId");

                    b.ToTable("pharmacy_assosiation_discount");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.PharmacyInsuranceDiscount", b =>
                {
                    b.Property<double>("DiscountPrecentage")
                        .HasColumnType("float")
                        .HasColumnName("discount_precentage");

                    b.Property<int>("InsuranceId")
                        .HasColumnType("int")
                        .HasColumnName("insurance_id");

                    b.Property<int>("PharmacyId")
                        .HasColumnType("int")
                        .HasColumnName("Pharmacy_id");

                    b.HasIndex("InsuranceId");

                    b.HasIndex("PharmacyId");

                    b.ToTable("pharmacy_insurance_discount");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.PharmacyPhone", b =>
                {
                    b.Property<int>("PharmacyId")
                        .HasColumnType("int")
                        .HasColumnName("pharmacy_id");

                    b.Property<decimal>("PhoneNumber")
                        .HasColumnType("numeric(18, 0)")
                        .HasColumnName("phone_number");

                    b.HasIndex("PharmacyId");

                    b.ToTable("pharmacy_phone");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("details");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasColumnType("money")
                        .HasColumnName("price");

                    b.HasKey("ProductId");

                    b.ToTable("product");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.ProductImage", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.Property<byte[]>("ProductImage1")
                        .IsRequired()
                        .HasColumnType("image")
                        .HasColumnName("product_image");

                    b.HasIndex("ProductId");

                    b.ToTable("product_image");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.RawMaterial", b =>
                {
                    b.Property<int>("MaterialId")
                        .HasColumnType("int")
                        .HasColumnName("material_id");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("details");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasColumnType("money")
                        .HasColumnName("price");

                    b.HasKey("MaterialId");

                    b.ToTable("raw_material");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.RawmaterialImage", b =>
                {
                    b.Property<int>("MaterialId")
                        .HasColumnType("int")
                        .HasColumnName("material_id");

                    b.Property<byte[]>("MaterialImage")
                        .IsRequired()
                        .HasColumnType("image")
                        .HasColumnName("material_image");

                    b.HasIndex("MaterialId");

                    b.ToTable("rawmaterial_image");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.Reservation", b =>
                {
                    b.Property<int>("ReservationId")
                        .HasColumnType("int")
                        .HasColumnName("reservation_id");

                    b.Property<string>("AppointmentType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("appointment_type");

                    b.Property<DateOnly>("BookDate")
                        .HasColumnType("date")
                        .HasColumnName("book_date");

                    b.Property<TimeOnly>("BookTime")
                        .HasColumnType("time")
                        .HasColumnName("book_time");

                    b.Property<int>("ClinicId")
                        .HasColumnType("int")
                        .HasColumnName("clinic_id");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("patient_id");

                    b.Property<DateOnly>("ReservationDate")
                        .HasColumnType("date")
                        .HasColumnName("reservation_date");

                    b.Property<TimeOnly>("ReservationTime")
                        .HasColumnType("time")
                        .HasColumnName("reservation_time");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.HasKey("ReservationId");

                    b.HasIndex("ClinicId");

                    b.HasIndex("PatientId");

                    b.ToTable("reservation");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.StoreAdmin", b =>
                {
                    b.Property<int>("AdminId")
                        .HasColumnType("int")
                        .HasColumnName("admin_id");

                    b.Property<int>("AssosiationId")
                        .HasColumnType("int")
                        .HasColumnName("assosiation_id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("password");

                    b.HasKey("AdminId");

                    b.ToTable("store_admin");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.StoreadminMaterialControl", b =>
                {
                    b.Property<int>("AdminId")
                        .HasColumnType("int")
                        .HasColumnName("admin_id");

                    b.Property<int>("MaterialId")
                        .HasColumnType("int")
                        .HasColumnName("material_id");

                    b.HasIndex("AdminId");

                    b.HasIndex("MaterialId");

                    b.ToTable("storeadmin_material_control");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.StoreadminProductControl", b =>
                {
                    b.Property<int>("AdminId")
                        .HasColumnType("int")
                        .HasColumnName("admin_id");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.HasIndex("AdminId");

                    b.HasIndex("ProductId");

                    b.ToTable("storeadmin_product_control");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.UserAdmin", b =>
                {
                    b.Property<int>("AdminId")
                        .HasColumnType("int")
                        .HasColumnName("admin_id");

                    b.Property<string>("AdminEmail")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("admin_email");

                    b.Property<string>("AdminName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("admin_name");

                    b.Property<string>("AdminPassword")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("admin_password");

                    b.Property<int>("AssosiationId")
                        .HasColumnType("int")
                        .HasColumnName("assosiation_id");

                    b.HasKey("AdminId")
                        .HasName("PK_ADMIN_table");

                    b.ToTable("user_admin");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.UseradminDoctorControl", b =>
                {
                    b.Property<int>("AdminId")
                        .HasColumnType("int")
                        .HasColumnName("admin_id");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int")
                        .HasColumnName("doctor_id");

                    b.HasIndex("AdminId");

                    b.HasIndex("DoctorId");

                    b.ToTable("useradmin_doctor_control");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.UseradminMedicaladminControl", b =>
                {
                    b.Property<int>("MadminId")
                        .HasColumnType("int")
                        .HasColumnName("Madmin_id");

                    b.Property<int>("UadminId")
                        .HasColumnType("int")
                        .HasColumnName("Uadmin_id");

                    b.HasIndex("MadminId");

                    b.HasIndex("UadminId");

                    b.ToTable("useradmin_medicaladmin_control");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.UseradminPatientControl", b =>
                {
                    b.Property<int>("AdminId")
                        .HasColumnType("int")
                        .HasColumnName("admin_id");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("patient_id");

                    b.HasIndex("AdminId");

                    b.HasIndex("PatientId");

                    b.ToTable("useradmin_patient_control");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.UseradminStoreadminControl", b =>
                {
                    b.Property<int>("SadminId")
                        .HasColumnType("int")
                        .HasColumnName("Sadmin_id");

                    b.Property<int>("UadminId")
                        .HasColumnType("int")
                        .HasColumnName("Uadmin_id");

                    b.HasIndex("SadminId");

                    b.HasIndex("UadminId");

                    b.ToTable("useradmin_storeadmin_control");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.AssosiationBranchPhone", b =>
                {
                    b.HasOne("Egyptian_association_of_cieliac_patients.Models.AssosiationBranch", "Assosiation")
                        .WithMany()
                        .HasForeignKey("AssosiationId")
                        .IsRequired()
                        .HasConstraintName("FK_assosiation_branch_phone_assosiation_branch");

                    b.Navigation("Assosiation");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.AssosiationDisesFollow", b =>
                {
                    b.HasOne("Egyptian_association_of_cieliac_patients.Models.AssosiationBranch", "Assosiation")
                        .WithMany()
                        .HasForeignKey("AssosiationId")
                        .IsRequired()
                        .HasConstraintName("FK_assosiation_dises_follow_assosiation_branch");

                    b.HasOne("Egyptian_association_of_cieliac_patients.Models.Dise", "Dises")
                        .WithMany()
                        .HasForeignKey("DisesId")
                        .IsRequired()
                        .HasConstraintName("FK_assosiation_dises__dises");

                    b.Navigation("Assosiation");

                    b.Navigation("Dises");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.AssosiationInsuranceProvide", b =>
                {
                    b.HasOne("Egyptian_association_of_cieliac_patients.Models.AssosiationBranch", "Assosiation")
                        .WithMany()
                        .HasForeignKey("AssosiationId")
                        .IsRequired()
                        .HasConstraintName("FK_assosiation_assosiation_branch");

                    b.HasOne("Egyptian_association_of_cieliac_patients.Models.HealthInsurance", "Insurance")
                        .WithMany()
                        .HasForeignKey("InsuranceId")
                        .IsRequired()
                        .HasConstraintName("FK_assosiation_health_insurance");

                    b.Navigation("Assosiation");

                    b.Navigation("Insurance");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.Cart", b =>
                {
                    b.HasOne("Egyptian_association_of_cieliac_patients.Models.Patient", "Patient")
                        .WithMany("Carts")
                        .HasForeignKey("PatientId")
                        .IsRequired()
                        .HasConstraintName("FK_cart_patient");

                    b.HasOne("Egyptian_association_of_cieliac_patients.Models.Payment", "Payment")
                        .WithMany()
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.CartMaterialAdd", b =>
                {
                    b.HasOne("Egyptian_association_of_cieliac_patients.Models.RawMaterial", "Material")
                        .WithMany()
                        .HasForeignKey("MaterialId")
                        .IsRequired()
                        .HasConstraintName("FK_cart_material_add_raw_material");

                    b.HasOne("Egyptian_association_of_cieliac_patients.Models.Cart", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("FK_cart_material_add_cart");

                    b.Navigation("Material");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.CartProductAdd", b =>
                {
                    b.HasOne("Egyptian_association_of_cieliac_patients.Models.Cart", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("FK_cart_product_add_cart");

                    b.HasOne("Egyptian_association_of_cieliac_patients.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_cart_product_add_product");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.ClinicAddress", b =>
                {
                    b.HasOne("Egyptian_association_of_cieliac_patients.Models.Clinic", "Clinic")
                        .WithMany()
                        .HasForeignKey("ClinicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Clinic");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.ClinicAssosiationDiscount", b =>
                {
                    b.HasOne("Egyptian_association_of_cieliac_patients.Models.AssosiationBranch", "Assosiation")
                        .WithMany()
                        .HasForeignKey("AssosiationId")
                        .IsRequired()
                        .HasConstraintName("FK_clinic_assosiation_discount_assosiation_branch");

                    b.HasOne("Egyptian_association_of_cieliac_patients.Models.Clinic", "Clinic")
                        .WithMany()
                        .HasForeignKey("ClinicId")
                        .IsRequired()
                        .HasConstraintName("FK_clinic_assosiation_discount_clinic");

                    b.Navigation("Assosiation");

                    b.Navigation("Clinic");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.ClinicInsuranceDiscount", b =>
                {
                    b.HasOne("Egyptian_association_of_cieliac_patients.Models.Clinic", "Clinic")
                        .WithMany()
                        .HasForeignKey("ClinicId")
                        .IsRequired()
                        .HasConstraintName("FK_clinic_insurance_discount_clinic");

                    b.HasOne("Egyptian_association_of_cieliac_patients.Models.HealthInsurance", "Insurance")
                        .WithMany()
                        .HasForeignKey("InsuranceId")
                        .IsRequired()
                        .HasConstraintName("FK_clinic_insurance_discount_health_insurance");

                    b.Navigation("Clinic");

                    b.Navigation("Insurance");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.ClinicPhone", b =>
                {
                    b.HasOne("Egyptian_association_of_cieliac_patients.Models.Clinic", "Clinic")
                        .WithMany()
                        .HasForeignKey("ClinicId")
                        .IsRequired()
                        .HasConstraintName("FK_clinic_phone_clinic");

                    b.Navigation("Clinic");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.DisesMaterialCatogrize", b =>
                {
                    b.HasOne("Egyptian_association_of_cieliac_patients.Models.Dise", "Dises")
                        .WithMany()
                        .HasForeignKey("DisesId")
                        .IsRequired()
                        .HasConstraintName("FK_raw_material_dises_catogrize_dises");

                    b.HasOne("Egyptian_association_of_cieliac_patients.Models.RawMaterial", "Material")
                        .WithMany()
                        .HasForeignKey("MaterialId")
                        .IsRequired()
                        .HasConstraintName("FK_raw_material_dises_catogrize_raw_material");

                    b.Navigation("Dises");

                    b.Navigation("Material");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.DisesProductCatogrize", b =>
                {
                    b.HasOne("Egyptian_association_of_cieliac_patients.Models.Dise", "Dises")
                        .WithMany()
                        .HasForeignKey("DisesId")
                        .IsRequired()
                        .HasConstraintName("FK_dises_product_catogrize_dises");

                    b.HasOne("Egyptian_association_of_cieliac_patients.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_dises_product_catogrize_product");

                    b.Navigation("Dises");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.DoctorClinicWork", b =>
                {
                    b.HasOne("Egyptian_association_of_cieliac_patients.Models.Clinic", "Clinic")
                        .WithMany()
                        .HasForeignKey("ClinicId")
                        .IsRequired()
                        .HasConstraintName("FK_doctor_clinic_work_clinic");

                    b.HasOne("Egyptian_association_of_cieliac_patients.Models.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .IsRequired()
                        .HasConstraintName("FK_doctor_clinic_work_doctor");

                    b.Navigation("Clinic");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.DoctorMedicalrecordVeiw", b =>
                {
                    b.HasOne("Egyptian_association_of_cieliac_patients.Models.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .IsRequired()
                        .HasConstraintName("FK_doctor_medicalrecord_veiw_doctor");

                    b.HasOne("Egyptian_association_of_cieliac_patients.Models.MedicalRecord", "Record")
                        .WithMany()
                        .HasForeignKey("RecordId")
                        .IsRequired()
                        .HasConstraintName("FK_doctor_medicalrecord_veiw_medical_record");

                    b.Navigation("Doctor");

                    b.Navigation("Record");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.DoctorPhone", b =>
                {
                    b.HasOne("Egyptian_association_of_cieliac_patients.Models.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .IsRequired()
                        .HasConstraintName("FK_doctor_phone_doctor");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.HospitalAddress", b =>
                {
                    b.HasOne("Egyptian_association_of_cieliac_patients.Models.Hospital", "Hospital")
                        .WithMany()
                        .HasForeignKey("hospitalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hospital");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.HospitalInsuranceDiscount", b =>
                {
                    b.HasOne("Egyptian_association_of_cieliac_patients.Models.Hospital", "Hospital")
                        .WithMany()
                        .HasForeignKey("HospitalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Egyptian_association_of_cieliac_patients.Models.HealthInsurance", "Insurance")
                        .WithMany()
                        .HasForeignKey("InsuranceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hospital");

                    b.Navigation("Insurance");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.HospitalPhone", b =>
                {
                    b.HasOne("Egyptian_association_of_cieliac_patients.Models.Hospital", "Hospital")
                        .WithMany()
                        .HasForeignKey("HospitalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hospital");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.HospitalType", b =>
                {
                    b.HasOne("Egyptian_association_of_cieliac_patients.Models.Hospital", "Hospital")
                        .WithMany()
                        .HasForeignKey("HospitalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hospital");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.InsuranceAddress", b =>
                {
                    b.HasOne("Egyptian_association_of_cieliac_patients.Models.HealthInsurance", "Insurance")
                        .WithMany()
                        .HasForeignKey("InsuranceId")
                        .IsRequired()
                        .HasConstraintName("FK_insurance_address_health_insurance");

                    b.Navigation("Insurance");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.InsurancePhone", b =>
                {
                    b.HasOne("Egyptian_association_of_cieliac_patients.Models.HealthInsurance", "Insurance")
                        .WithMany()
                        .HasForeignKey("InsuranceId")
                        .IsRequired()
                        .HasConstraintName("FK_insurance_phone_health_insurance");

                    b.Navigation("Insurance");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.LabAddress", b =>
                {
                    b.HasOne("Egyptian_association_of_cieliac_patients.Models.Lab", "Lab")
                        .WithMany()
                        .HasForeignKey("labId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lab");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.LabAssosiationDiscount", b =>
                {
                    b.HasOne("Egyptian_association_of_cieliac_patients.Models.AssosiationBranch", "Assosiation")
                        .WithMany()
                        .HasForeignKey("AssosiationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Egyptian_association_of_cieliac_patients.Models.Lab", "Lab")
                        .WithMany()
                        .HasForeignKey("LabId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assosiation");

                    b.Navigation("Lab");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.LabInsuranceDiscount", b =>
                {
                    b.HasOne("Egyptian_association_of_cieliac_patients.Models.HealthInsurance", "Insurance")
                        .WithMany()
                        .HasForeignKey("InsuranceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Egyptian_association_of_cieliac_patients.Models.Lab", "Lab")
                        .WithMany()
                        .HasForeignKey("LabId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Insurance");

                    b.Navigation("Lab");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.LabPhone", b =>
                {
                    b.HasOne("Egyptian_association_of_cieliac_patients.Models.Lab", "Lab")
                        .WithMany()
                        .HasForeignKey("LabId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lab");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.LabType", b =>
                {
                    b.HasOne("Egyptian_association_of_cieliac_patients.Models.Lab", "Lab")
                        .WithMany()
                        .HasForeignKey("LabId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lab");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.MedicalAdmin", b =>
                {
                    b.HasOne("Egyptian_association_of_cieliac_patients.Models.AssosiationBranch", "Assosiation")
                        .WithMany("MedicalAdmins")
                        .HasForeignKey("AssosiationId")
                        .IsRequired()
                        .HasConstraintName("FK_medical_admin_assosiation_branch");

                    b.Navigation("Assosiation");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.MedicalAdminHospitalControl", b =>
                {
                    b.HasOne("Egyptian_association_of_cieliac_patients.Models.MedicalAdmin", "Admin")
                        .WithMany()
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Egyptian_association_of_cieliac_patients.Models.Hospital", "Hospital")
                        .WithMany()
                        .HasForeignKey("HospitalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");

                    b.Navigation("Hospital");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.MedicalAdminLabControl", b =>
                {
                    b.HasOne("Egyptian_association_of_cieliac_patients.Models.MedicalAdmin", "Admin")
                        .WithMany()
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Egyptian_association_of_cieliac_patients.Models.Lab", "Lab")
                        .WithMany()
                        .HasForeignKey("LabId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");

                    b.Navigation("Lab");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.MedicalAdminPharmacyControl", b =>
                {
                    b.HasOne("Egyptian_association_of_cieliac_patients.Models.MedicalAdmin", "Admin")
                        .WithMany()
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Egyptian_association_of_cieliac_patients.Models.Pharmacy", "Pharmacy")
                        .WithMany()
                        .HasForeignKey("PharmacyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");

                    b.Navigation("Pharmacy");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.MedicalRecordDrug", b =>
                {
                    b.HasOne("Egyptian_association_of_cieliac_patients.Models.MedicalRecord", "Record")
                        .WithMany()
                        .HasForeignKey("RecordId")
                        .IsRequired()
                        .HasConstraintName("FK_medical_record-drug_medical_record");

                    b.Navigation("Record");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.MedicalRecordTest", b =>
                {
                    b.HasOne("Egyptian_association_of_cieliac_patients.Models.MedicalRecord", "Record")
                        .WithMany()
                        .HasForeignKey("RecordId")
                        .IsRequired()
                        .HasConstraintName("FK_medical_record-test_medical_record");

                    b.Navigation("Record");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.MedicaladminClinicControl", b =>
                {
                    b.HasOne("Egyptian_association_of_cieliac_patients.Models.MedicalAdmin", "Admin")
                        .WithMany()
                        .HasForeignKey("AdminId")
                        .IsRequired()
                        .HasConstraintName("FK_medicaladmin_clinic_control_medical_admin");

                    b.HasOne("Egyptian_association_of_cieliac_patients.Models.Clinic", "Clinic")
                        .WithMany()
                        .HasForeignKey("ClinicId")
                        .IsRequired()
                        .HasConstraintName("FK_medicaladmin_clinic_control_clinic");

                    b.Navigation("Admin");

                    b.Navigation("Clinic");
                });

<<<<<<<< HEAD:Migrations/20240413154007_assosiation-patient.Designer.cs
            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.Patient", b =>
                {
                    b.HasOne("Egyptian_association_of_cieliac_patients.Models.AssosiationBranch", "Branch")
                        .WithMany("Patients")
                        .HasForeignKey("AssosiationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");
                });

========
>>>>>>>> b3feb215df36f47c5294f1f05e4b5bfc9afad0ad:Migrations/20240412065012_multivalue.Designer.cs
            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.PatientAddress", b =>
                {
                    b.HasOne("Egyptian_association_of_cieliac_patients.Models.Patient", "Patient")
                        .WithMany("Addresses")
                        .HasForeignKey("PatientId")
                        .IsRequired()
                        .HasConstraintName("FK_patient_address_patient");
<<<<<<<< HEAD:Migrations/20240413154007_assosiation-patient.Designer.cs
========

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.PatientAssosiationParticpate", b =>
                {
                    b.HasOne("Egyptian_association_of_cieliac_patients.Models.AssosiationBranch", "Assosiation")
                        .WithMany()
                        .HasForeignKey("AssosiationId")
                        .IsRequired()
                        .HasConstraintName("FK_patient_assosiation_particpate_assosiation_branch");

                    b.HasOne("Egyptian_association_of_cieliac_patients.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .IsRequired()
                        .HasConstraintName("FK_patient_assosiation_particpate_patient");

                    b.Navigation("Assosiation");
>>>>>>>> b3feb215df36f47c5294f1f05e4b5bfc9afad0ad:Migrations/20240412065012_multivalue.Designer.cs

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.PatientDisesHave", b =>
                {
                    b.HasOne("Egyptian_association_of_cieliac_patients.Models.Dise", "Dises")
                        .WithMany("patients")
                        .HasForeignKey("DisesId")
                        .IsRequired()
                        .HasConstraintName("FK_patient_dises-have_dises");

                    b.HasOne("Egyptian_association_of_cieliac_patients.Models.Patient", "Patient")
                        .WithMany("Diseses")
                        .HasForeignKey("PatientId")
                        .IsRequired()
                        .HasConstraintName("FK_patient_dises-have_patient");

                    b.Navigation("Dises");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.PatientPhone", b =>
                {
                    b.HasOne("Egyptian_association_of_cieliac_patients.Models.Patient", "Patient")
                        .WithMany("PhoneNumbers")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_patient_phone_patient");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.PatientProductView", b =>
                {
                    b.HasOne("Egyptian_association_of_cieliac_patients.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .HasConstraintName("FK_patient_product_view_patient");

                    b.HasOne("Egyptian_association_of_cieliac_patients.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_patient_product_view_product");

                    b.Navigation("Patient");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.PatientRawmaterialVeiw", b =>
                {
                    b.HasOne("Egyptian_association_of_cieliac_patients.Models.RawMaterial", "Material")
                        .WithMany()
                        .HasForeignKey("MaterialId")
                        .IsRequired()
                        .HasConstraintName("FK_patient_rawmaterial_veiw_raw_material");

                    b.HasOne("Egyptian_association_of_cieliac_patients.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .IsRequired()
                        .HasConstraintName("FK_patient_rawmaterial_veiw_patient");

                    b.Navigation("Material");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.PharmacyAddress", b =>
                {
                    b.HasOne("Egyptian_association_of_cieliac_patients.Models.Pharmacy", "Pharmacy")
                        .WithMany()
                        .HasForeignKey("PharmacyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pharmacy");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.PharmacyAssosiationDiscount", b =>
                {
                    b.HasOne("Egyptian_association_of_cieliac_patients.Models.AssosiationBranch", "Assosiation")
                        .WithMany()
                        .HasForeignKey("AssosiationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Egyptian_association_of_cieliac_patients.Models.Pharmacy", "Pharmacy")
                        .WithMany()
                        .HasForeignKey("PharmacyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assosiation");

                    b.Navigation("Pharmacy");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.PharmacyInsuranceDiscount", b =>
                {
                    b.HasOne("Egyptian_association_of_cieliac_patients.Models.HealthInsurance", "Insurance")
                        .WithMany()
                        .HasForeignKey("InsuranceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Egyptian_association_of_cieliac_patients.Models.Pharmacy", "Pharmacy")
                        .WithMany()
                        .HasForeignKey("PharmacyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Insurance");

                    b.Navigation("Pharmacy");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.PharmacyPhone", b =>
                {
                    b.HasOne("Egyptian_association_of_cieliac_patients.Models.Pharmacy", "Pharmacy")
                        .WithMany()
                        .HasForeignKey("PharmacyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pharmacy");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.ProductImage", b =>
                {
                    b.HasOne("Egyptian_association_of_cieliac_patients.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_product_image_product");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.RawmaterialImage", b =>
                {
                    b.HasOne("Egyptian_association_of_cieliac_patients.Models.RawMaterial", "Material")
                        .WithMany()
                        .HasForeignKey("MaterialId")
                        .IsRequired()
                        .HasConstraintName("FK_rawmaterial_image_raw_material");

                    b.Navigation("Material");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.Reservation", b =>
                {
                    b.HasOne("Egyptian_association_of_cieliac_patients.Models.Clinic", "clinic")
                        .WithMany()
                        .HasForeignKey("ClinicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Egyptian_association_of_cieliac_patients.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");

                    b.Navigation("clinic");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.StoreadminMaterialControl", b =>
                {
                    b.HasOne("Egyptian_association_of_cieliac_patients.Models.StoreAdmin", "Admin")
                        .WithMany()
                        .HasForeignKey("AdminId")
                        .IsRequired()
                        .HasConstraintName("FK_storeadmin_material_control_store_admin");

                    b.HasOne("Egyptian_association_of_cieliac_patients.Models.RawMaterial", "Material")
                        .WithMany()
                        .HasForeignKey("MaterialId")
                        .IsRequired()
                        .HasConstraintName("FK_storeadmin_material_control_raw_material");

                    b.Navigation("Admin");

                    b.Navigation("Material");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.StoreadminProductControl", b =>
                {
                    b.HasOne("Egyptian_association_of_cieliac_patients.Models.StoreAdmin", "Admin")
                        .WithMany()
                        .HasForeignKey("AdminId")
                        .IsRequired()
                        .HasConstraintName("FK_storeadmin_product_control_store_admin");

                    b.HasOne("Egyptian_association_of_cieliac_patients.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_storeadmin_product_control_product");

                    b.Navigation("Admin");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.UseradminDoctorControl", b =>
                {
                    b.HasOne("Egyptian_association_of_cieliac_patients.Models.UserAdmin", "Admin")
                        .WithMany()
                        .HasForeignKey("AdminId")
                        .IsRequired()
                        .HasConstraintName("FK_useradmin_doctor_control_user_admin");

                    b.HasOne("Egyptian_association_of_cieliac_patients.Models.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .IsRequired()
                        .HasConstraintName("FK_useradmin_doctor_control_doctor");

                    b.Navigation("Admin");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.UseradminMedicaladminControl", b =>
                {
                    b.HasOne("Egyptian_association_of_cieliac_patients.Models.MedicalAdmin", "Madmin")
                        .WithMany()
                        .HasForeignKey("MadminId")
                        .IsRequired()
                        .HasConstraintName("FK_useradmin_medicaladmin_control_medical_admin");

                    b.HasOne("Egyptian_association_of_cieliac_patients.Models.UserAdmin", "Uadmin")
                        .WithMany()
                        .HasForeignKey("UadminId")
                        .IsRequired()
                        .HasConstraintName("FK_useradmin_medicaladmin_control_user_admin");

                    b.Navigation("Madmin");

                    b.Navigation("Uadmin");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.UseradminPatientControl", b =>
                {
                    b.HasOne("Egyptian_association_of_cieliac_patients.Models.UserAdmin", "Admin")
                        .WithMany()
                        .HasForeignKey("AdminId")
                        .IsRequired()
                        .HasConstraintName("FK_useradmin_patient_control_user_admin");

                    b.HasOne("Egyptian_association_of_cieliac_patients.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .IsRequired()
                        .HasConstraintName("FK_useradmin_patient_control_patient");

                    b.Navigation("Admin");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.UseradminStoreadminControl", b =>
                {
                    b.HasOne("Egyptian_association_of_cieliac_patients.Models.StoreAdmin", "Sadmin")
                        .WithMany()
                        .HasForeignKey("SadminId")
                        .IsRequired()
                        .HasConstraintName("FK_useradmin_storeadmin_control_store_admin");

                    b.HasOne("Egyptian_association_of_cieliac_patients.Models.UserAdmin", "Uadmin")
                        .WithMany()
                        .HasForeignKey("UadminId")
                        .IsRequired()
                        .HasConstraintName("FK_useradmin_storeadmin_control_user_admin");

                    b.Navigation("Sadmin");

                    b.Navigation("Uadmin");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.AssosiationBranch", b =>
                {
                    b.Navigation("MedicalAdmins");

                    b.Navigation("Patients");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.Dise", b =>
                {
                    b.Navigation("patients");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.Patient", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Carts");

<<<<<<<< HEAD:Migrations/20240413154007_assosiation-patient.Designer.cs
                    b.Navigation("Diseses");

========
>>>>>>>> b3feb215df36f47c5294f1f05e4b5bfc9afad0ad:Migrations/20240412065012_multivalue.Designer.cs
                    b.Navigation("PhoneNumbers");
                });
#pragma warning restore 612, 618
        }
    }
}
